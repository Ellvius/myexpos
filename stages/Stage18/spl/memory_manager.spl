alias functionNum R1;

// Get Free Page

if (functionNum == 1) 
then
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;      // Increment the wait mem count

    while([SYSTEM_STATUS_TABLE + 2] == 0) do
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = WAIT_MEM;
        multipush(R1, R2);
        call SCHEDULER;
        multipop(R1, R2);
    endwhile;

    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;      // Decrement the wait mem count
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;      // Decrement Mem free count

    alias index R3;
    index = 0;

    while([MEMORY_FREE_LIST + index] != 0) do
        index = index + 1;
    endwhile;

    [MEMORY_FREE_LIST + index] = 1;
    R0 = index;
    return;

endif;


// Release Page

if (functionNum == 2) 
then
    alias pageNum R2;
    [MEMORY_FREE_LIST + pageNum] = [MEMORY_FREE_LIST + pageNum] - 1;

    if([MEMORY_FREE_LIST + pageNum] == 0)
    then
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;      // Increment Mem free count
    endif;
    
    alias index R3;
    index = 0;
    
    while(index < 16) do
        alias indexPID R4;
        alias status R5;
        indexPID = [PROCESS_TABLE + index * 16 + 1];
        status = [PROCESS_TABLE + index * 16 + 4];

        if(( indexPID != -1) && (status == WAIT_MEM))
        then
            status = READY;
        endif;

        index = index + 1;
    endwhile;

    return;

endif;