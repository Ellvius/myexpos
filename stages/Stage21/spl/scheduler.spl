alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE + 1];

multipush(BP);

alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + (currentPID * 16);

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

alias newPID R2;
alias iPID R3;
alias iprocess_status R4;
iPID = currentPID + 1;

while ((iPID % 16) != currentPID) do
    iprocess_status = [PROCESS_TABLE + ((iPID % 16) * 16) + 4];
    if ((iprocess_status == READY) || (iprocess_status == CREATED)) then
        newPID = iPID % 16;
        break;
    endif;
    iPID = iPID + 1;
endwhile;

if((iPID % 16) == currentPID ) then
    newPID = 0;
endif;

alias new_process_table R5;
new_process_table = PROCESS_TABLE + (newPID * 16);

SP = [new_process_table + 11] * 512 + [new_process_table + 12];
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

[SYSTEM_STATUS_TABLE + 1] = newPID;

if([new_process_table + 4] == CREATED) then
    SP = [new_process_table + 13];
    BP = [[new_process_table + 11]*512];
    [new_process_table + 4] = RUNNING;
    [new_process_table + 9] = 0;
    ireturn;
endif;

[new_process_table + 4] = RUNNING;

multipop(BP);

return;