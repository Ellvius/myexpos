alias functionNum R1;
alias currentPID R2;



if(functionNum == DISK_LOAD) then
    alias pageNum R3;
    alias blockNum R4;

    // Calling Acquire Disk
    multipush(R1, R2, R3, R4);
    R1 = ACQUIRE_DISK;
    R2 = currentPID;
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3, R4);

    // Set disk status table
    [DISK_STATUS_TABLE + 1] = 0;
    [DISK_STATUS_TABLE + 2] = pageNum;
    [DISK_STATUS_TABLE + 3] = blockNum;

    load(pageNum, blockNum);
    [PROCESS_TABLE + currentPID * 16 + 4] = WAIT_DISK;

    multipush(R1, R2, R3, R4);
    call SCHEDULER;
    multipop(R1, R2, R3, R4);

    return;

endif;



if(functionNum == TERMINAL_WRITE) then
    // Calling Acquire Terminal
    multipush(R1, R2, R3);
    R1 = ACQUIRE_TERMINAL;
    R2 = currentPID;
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3);
    
    print R3;

    // Calling Release Terminal
    multipush(R1, R2, R3);
    R1 = RELEASE_TERMINAL;
    R2 = currentPID;
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3);
    
    return;

endif;




if(functionNum == TERMINAL_READ)
then    
    // Calling Acquire Terminal
    multipush(R1, R2, R3);
    R1 = ACQUIRE_TERMINAL;
    R2 = currentPID;
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3);

    read;
    [PROCESS_TABLE + (currentPID*16) + 4] = WAIT_TERMINAL;

    // Invoke the context switch module
    multipush(R1, R2, R3);
    call SCHEDULER;
    multipop(R1, R2, R3);

    // Get the physical address of read word
    alias physicalReadAddr R5;
    physicalReadAddr = [PTBR+ 2*(R3/512)]*512 + (R3%512);
    [physicalReadAddr] = [PROCESS_TABLE + (currentPID*16) + 8];

    return;

else
    return;

endif;
