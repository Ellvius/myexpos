// Load init 
loadi(65,7);
loadi(66,8);

// Load library
loadi(63,13);
loadi(64,14);

// Load exception handler
loadi(2,15);
loadi(3,16);

// Load timer interrupt handler
loadi(4,17);
loadi(5,18);

// Load INT 7 module
loadi(16,29);
loadi(17,30);

// Load INT 10 module
loadi(22,35);
loadi(23,36);

// Load Schedules MODULE_5
loadi(50,63);
loadi(51,64);

// Load even program
loadi(85,69);

// Load even program
loadi(91,70);



// For init process

PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

// Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

// Process table for init process
[PROCESS_TABLE + 16 + 1] = 1;                           // PID
[PROCESS_TABLE + 16 + 4] = CREATED;                     // Status
[PROCESS_TABLE + 16 + 11] = 80;                         // User area page
[PROCESS_TABLE + 16 + 12] = 0;                          // KPTR
[PROCESS_TABLE + 16 + 13] = 8 * 512;                    // UPTR
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;       // PTBR
[PROCESS_TABLE + 16 + 15] = 10;                         // PTLR

[76*512] = [65*512 + 1];


// For even program

PTBR = PAGE_TABLE_BASE + 40;
PTLR = 10;

// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = 83;
[PTBR+5] = "0110";
[PTBR+6] = 84;
[PTBR+7] = "0110";

// Code
[PTBR+8] = 85;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// Stack
[PTBR+16] = 86;
[PTBR+17] = "0110";
[PTBR+18] = 87;
[PTBR+19] = "0110";

// Process table for init process
[PROCESS_TABLE + 2*16 + 1] = 2;                           // PID
[PROCESS_TABLE + 2*16 + 4] = CREATED;                     // Status
[PROCESS_TABLE + 2*16 + 11] = 88;                         // User area page
[PROCESS_TABLE + 2*16 + 12] = 0;                          // KPTR
[PROCESS_TABLE + 2*16 + 13] = 8 * 512;                    // UPTR
[PROCESS_TABLE + 2*16 + 14] = PAGE_TABLE_BASE + 40;       // PTBR
[PROCESS_TABLE + 2*16 + 15] = 10;                         // PTLR

[86*512] = [85*512 + 1];



// For prime program

PTBR = PAGE_TABLE_BASE + 60;
PTLR = 10;

// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = 89;
[PTBR+5] = "0110";
[PTBR+6] = 90;
[PTBR+7] = "0110";

// Code
[PTBR+8] = 91;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// Stack
[PTBR+16] = 92;
[PTBR+17] = "0110";
[PTBR+18] = 93;
[PTBR+19] = "0110";

// Process table for init process
[PROCESS_TABLE + 3*16 + 1] = 3;                           // PID
[PROCESS_TABLE + 3*16 + 4] = CREATED;                     // Status
[PROCESS_TABLE + 3*16 + 11] = 94;                         // User area page
[PROCESS_TABLE + 3*16 + 12] = 0;                          // KPTR
[PROCESS_TABLE + 3*16 + 13] = 8 * 512;                    // UPTR
[PROCESS_TABLE + 3*16 + 14] = PAGE_TABLE_BASE + 60;       // PTBR
[PROCESS_TABLE + 3*16 + 15] = 10;                         // PTLR

[92*512] = [91*512 + 1];


// Set the status of other processes to be terminated
[PROCESS_TABLE +  4*16 + 4] = TERMINATED;
[PROCESS_TABLE +  5*16 + 4] = TERMINATED;
[PROCESS_TABLE +  6*16 + 4] = TERMINATED;
[PROCESS_TABLE +  7*16 + 4] = TERMINATED;
[PROCESS_TABLE +  8*16 + 4] = TERMINATED;
[PROCESS_TABLE +  9*16 + 4] = TERMINATED;
[PROCESS_TABLE + 10*16 + 4] = TERMINATED;
[PROCESS_TABLE + 11*16 + 4] = TERMINATED;
[PROCESS_TABLE + 12*16 + 4] = TERMINATED;
[PROCESS_TABLE + 13*16 + 4] = TERMINATED;
[PROCESS_TABLE + 14*16 + 4] = TERMINATED;
[PROCESS_TABLE + 15*16 + 4] = TERMINATED;

return;
