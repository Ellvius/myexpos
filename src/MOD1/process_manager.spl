alias functionNum R1;


if (functionNum == GET_PCB_ENTRY) then
    alias index R2;
    index = 1;

    while(index < 16) do
        if(([PROCESS_TABLE + 1] == -1) || ([PROCESS_TABLE + 4] == TERMINATED)) then
            [PROCESS_TABLE + 1] = index;
            [PROCESS_TABLE + 4] = ALLOCATED;
            [PROCESS_TABLE + 14] = PAGE_TABLE_BASE + 20*index;
            [PROCESS_TABLE + 15] = 10;

            R0 = index;
            return;

        endif;
        index = index + 1;
    endwhile;

    R0 = -1;
    return;
    
endif;



if (functionNum == FREE_USER_AREA_PAGE) then
    alias PID R2;
    alias userAreaPage R3;
    userAreaPage = [PROCESS_TABLE + PID * 16 + 11];

    multipush(R1, R2, R3);
    R1 = RELEASE_PAGE;
    R2 = userAreaPage;
    call MEMORY_MANAGER;
    multipop(R1, R2, R3);
    return;

endif;



if (functionNum == EXIT_PROCESS) then
    alias PID R2;

    multipush(R1, R2);
    R1 = FREE_PAGE_TABLE;
    R2 = PID;
    call PROCESS_MANAGER;

    R1 = FREE_USER_AREA_PAGE;
    call PROCESS_MANAGER;
    multipop(R1, R2);

    [PROCESS_TABLE + PID * 16 + 4] = TERMINATED;

    return;
    
endif;



if (functionNum == FREE_PAGE_TABLE) then
    alias PID R2;
    PTBR = PAGE_TABLE_BASE + PID * 20;

    // Invalidate Library
    [PTBR+0] = -1;
    [PTBR+1] = "0000";
    [PTBR+2] = -1;
    [PTBR+3] = "0000";
    
    alias index R3;
    index = 4;

    while(index < 20) do
        if([PTBR + index] != -1) 
        then

            multipush(R1, R2, R3);
            R1 = RELEASE_PAGE;
            R2 = [PTBR + index];
            call MEMORY_MANAGER;
            multipop(R1, R2, R3);
        endif;

        // Invalidate the corresponding page table entry
        [PTBR + index] = -1;
        [PTBR + index + 1] = "0000";

        index = index + 2;
    endwhile;
    
    index = 0;
    while(index < 10) do
        if([DISK_MAP_TABLE + PID * 10 + index] != -1)
        then
            // Check if it is a stack or Heap
            if((index == 2) || (index == 3) || (index == 8) || (index == 9))
            then

                multipush(R1, R2, R3);
                R1 = RELEASE_BLOCK;
                R2 = [DISK_MAP_TABLE + PID * 10 + index];
                call MEMORY_MANAGER;
                multipop(R1, R2, R3);
            endif;
        endif;
        
        // Set the entry to -1
        [DISK_MAP_TABLE + PID * 10 + index] = -1;

        index = index + 1;
    endwhile;

    return;
    
endif;