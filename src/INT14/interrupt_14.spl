alias userSP R0;
userSP = SP;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

alias systemCallNumber R1;
systemCallNumber = [[PTBR + 2 * ((userSP - 5) / 512)] * 512 + (userSP - 5) % 512];
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = systemCallNumber;


if(systemCallNumber == INT_SEMLOCK) then
    alias SEMID R2;
    alias RESOURCE_TABLE R3;
    alias SEMTABLEINDEX R4;

    SEMID = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + (userSP - 4) % 512];
    RESOURCE_TABLE = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 + RESOURCE_TABLE_OFFSET;
    SEMTABLEINDEX = [RESOURCE_TABLE + SEMID * 2 + 1];

    if(SEMID < 0 || SEMID > 7 || [RESOURCE_TABLE + SEMID * 2] != 1) then
        [[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = -1;
    else 
        while([SEMAPHORE_TABLE + SEMTABLEINDEX * 4] != [SYSTEM_STATUS_TABLE + 1]) do
            [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = WAIT_SEMAPHORE;
            [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 5] = SEMTABLEINDEX;

            multipush(R0,R1,R2,R3);
            call SCHEDULER;
            multipop(R0,R1,R2,R3);

        endwhile;

        [SEMAPHORE_TABLE + SEMTABLEINDEX * 4] = [SYSTEM_STATUS_TABLE + 1];
        [[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = 0;
    endif;
endif;


if(systemCallNumber == INT_SEMUNLOCK) then
    alias SEMID R2;
    alias RESOURCE_TABLE R3;
    alias SEMTABLEINDEX R4;
    SEMID = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + (userSP - 4) % 512];
    RESOURCE_TABLE = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 + RESOURCE_TABLE_OFFSET;
    SEMTABLEINDEX = [RESOURCE_TABLE + SEMID * 2 + 1];

    if(SEMID < 0 || SEMID > 7 || [RESOURCE_TABLE + SEMID * 2] != 1) then
        [[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = -1;
    else 
        if([SEMAPHORE_TABLE +  SEMTABLEINDEX * 4] != -1) then
            if([SEMAPHORE_TABLE + SEMTABLEINDEX * 4] != [SYSTEM_STATUS_TABLE + 1]) then
                [[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = -2;
            else
                [SEMAPHORE_TABLE + SEMTABLEINDEX * 4] = -1;
                alias i R5;
                i = 0;

                while(i < 16) do 
                    if([PROCESS_TABLE + i * 16 + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + i * 16 + 5] == SEMTABLEINDEX) then
                        [PROCESS_TABLE + i * 16 + 4] = READY;
                    endif;
                    i = i + 1;
                endwhile;

                [[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = 0;
            endif;

        else
            [[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = 0;
        endif;
    endif;
endif;


SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
ireturn;