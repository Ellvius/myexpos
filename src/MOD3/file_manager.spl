alias functionNum R1;

if(functionNum == BUFFERED_READ) then
    alias blockNum R2;
    alias offset R3;
    alias memAddress R4;
    alias bufferNum R5;

    bufferNum = blockNum % MAX_BUFFER;

    multipush(R1,R2,R3,R4,R5);

    R1 = ACQUIRE_BUFFER;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = bufferNum;
    call RESOURCE_MANAGER;

    multipop(R1,R2,R3,R4,R5);

    if([BUFFER_TABLE + bufferNum * 4] != blockNum) then
        if([BUFFER_TABLE + bufferNum * 4 + 1] == 1) then
            multipush(R1,R2,R3,R4,R5);

            R1 = DISK_STORE;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            R3 = 71 + bufferNum;
            R4 = [BUFFER_TABLE + bufferNum * 4];
            call DEVICE_MANAGER;

            multipop(R1,R2,R3,R4,R5);

            [BUFFER_TABLE + bufferNum * 4 + 1] = 0;
        endif;

        multipush(R1,R2,R3,R4,R5);

        R1 = DISK_LOAD;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = BUFFER / 512 + bufferNum;
        R4 = blockNum;
        call DEVICE_MANAGER;

        multipop(R1,R2,R3,R4,R5);

        [BUFFER_TABLE + bufferNum * 4] = blockNum;
    endif;

    [memAddress] = [BUFFER + bufferNum * 512 + offset];

    multipush(R1,R2,R3,R4,R5);

    R1 = RELEASE_BUFFER;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = bufferNum;
    call RESOURCE_MANAGER;

    multipop(R1,R2,R3,R4,R5);
    return;
endif;


if(functionNum == OPEN) then
    alias fileName R2;
    alias inodeIndex R3;

    inodeIndex = 0;
    while(inodeIndex < MAX_FILE_NUM) do
        if([INODE_TABLE + inodeIndex * 16 + 1] == fileName) then
            break;
        endif;
        inodeIndex = inodeIndex + 1;
    endwhile;

    if(inodeIndex == MAX_FILE_NUM) then
        R0 = -1;
        return;
    endif;

    multipush(R1,R2,R3);

    R1 = ACQUIRE_INODE;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = inodeIndex;
    call RESOURCE_MANAGER;
    alias lockingStatus R0;

    multipop(R1,R2,R3);

    if(lockingStatus == -1) then
        R0 = -1;
        return;
    endif;

    if([INODE_TABLE + inodeIndex * 16] == EXEC) then
        multipush(R1,R2,R3);

        R1 = RELEASE_INODE;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = inodeIndex;
        call RESOURCE_MANAGER;

        multipop(R1,R2,R3);

        R0 = -1;
        return;
    endif;

    alias i R4;
    i = 0;

    while(i < MAX_OPENFILE_NUM) do
        if([OPEN_FILE_TABLE + i * 4] == -1) then
            break;
        endif;
        i = i + 1;
    endwhile;

    if(i == MAX_OPENFILE_NUM) then
        multipush(R1,R2,R3,R4);

        R1 = RELEASE_INODE;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = inodeIndex;
        call RESOURCE_MANAGER;

        multipop(R1,R2,R3,R4);

        R0 = -2;
        return;
    endif;

    if(fileName == "root") then
        [OPEN_FILE_TABLE + i * 4] = INODE_ROOT;
    else
        if([FILE_STATUS_TABLE + inodeIndex * 4 + 1] == -1) then
            [FILE_STATUS_TABLE + inodeIndex * 4 + 1] = 1;
        else
            [FILE_STATUS_TABLE + inodeIndex * 4 + 1] = [FILE_STATUS_TABLE + inodeIndex * 4 + 1] + 1;
        endif;
        [OPEN_FILE_TABLE + i * 4] = inodeIndex;
    endif;

    [OPEN_FILE_TABLE + i * 4 + 1] = 1;
    [OPEN_FILE_TABLE + i * 4 + 2] = 0;

    multipush(R1,R2,R3,R4);

    R1 = RELEASE_INODE;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = inodeIndex;
    call RESOURCE_MANAGER;

    multipop(R1,R2,R3,R4);

    R0 = i;
    return;
endif;


if(functionNum == CLOSE) then
    alias fileTableIndex R2;
    alias inodeIndex R3;

    inodeIndex = [OPEN_FILE_TABLE + fileTableIndex * 4];

    [OPEN_FILE_TABLE + fileTableIndex * 4 + 1] = [OPEN_FILE_TABLE + fileTableIndex * 4 + 1] - 1;

    if([OPEN_FILE_TABLE + fileTableIndex * 4 + 1] == 0) then
        [OPEN_FILE_TABLE + fileTableIndex * 4 ] = -1;
        [OPEN_FILE_TABLE + fileTableIndex * 4 + 1] = -1;
        [OPEN_FILE_TABLE + fileTableIndex * 4 + 2] = -1;

        if(inodeIndex != INODE_ROOT) then
            [FILE_STATUS_TABLE + inodeIndex * 4 + 1] = [FILE_STATUS_TABLE + inodeIndex * 4 + 1] - 1;

            if([FILE_STATUS_TABLE + inodeIndex * 4 + 1] == 0) then
                [FILE_STATUS_TABLE + inodeIndex * 4 + 1] = -1;
            endif;
        endif;
    endif;
    
    return;
endif;
