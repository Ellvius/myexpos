type
Share
{
  int isempty;
  int data;
}
endtype

decl
  Share buf;
enddecl

int main(){
    decl
        int x, temp, semid, chocolate, counter, pid;
    enddecl

    begin
        x = exposcall("Heapset");
        buf = exposcall("Alloc", 2);
        buf.isempty = 1;
        buf.data = 0;
        semid = exposcall("Semget");
        pid = exposcall("Fork");
        counter = 0;

        if(pid == 0) then
            counter = 1;
            while(counter <=10) do
                temp = exposcall("SemLock", semid);
                
                temp = buf.data;
                if(temp == 0) then
                    write("empty");
                endif;
                write("produce");
                buf.data = buf.data + 1;
                buf.isempty = 0;
                write(buf.data);
                counter = counter + 1;
                temp = exposcall("SemUnLock", semid);
            endwhile;
        else
            while(counter < 10) do
                temp = exposcall("SemLock", semid);
                temp = buf.isempty;
                while(temp == 0) do
                    temp = buf.data;
                    write("consume");
                    write(buf.data);
                    buf.data = buf.data - 1;
                    temp = buf.data;
                    if(temp == 0) then
                        buf.isempty = 1;
                    endif;
                    temp = buf.isempty;
                endwhile;
                temp = exposcall("SemUnLock", semid);
                counter = counter + 1;
            endwhile;
        endif;

        temp = exposcall("Semrelease", semid);
        return 0;
    end
}