alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE + 1];

multipush(BP);

alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + (currentPID * 16);

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

alias newPID R2;

if([SYSTEM_STATUS_TABLE + 5] != 0) then
    if([PROCESS_TABLE + SWAPPER_DAEMON * 16 + 4] == WAIT_DISK) then
        newPID = IDLE_PROCESS;
    else
        newPID = SWAPPER_DAEMON;
    endif;

else
    newPID = currentPID + 1;
    newPID = newPID % 16;

    while (newPID != currentPID) do
        if(newPID != IDLE_PROCESS && newPID != SWAPPER_DAEMON && [PROCESS_TABLE + newPID * 16 + 6] == 0) then
            if (([PROCESS_TABLE + newPID * 16 + 4] == READY) || ([PROCESS_TABLE + newPID * 16 + 4] == CREATED)) then
                break;
            endif;
        endif;

        newPID = newPID + 1;
        newPID = newPID % 16;
    endwhile;

    if(newPID  == currentPID ) then
        newPID = IDLE_PROCESS;
    endif;

endif;



alias new_process_table R3;
new_process_table = PROCESS_TABLE + (newPID * 16);

SP = [new_process_table + 11] * 512 + [new_process_table + 12];
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

[SYSTEM_STATUS_TABLE + 1] = newPID;

if([new_process_table + 4] == CREATED) then
    SP = [new_process_table + 13];
    BP = [[new_process_table + 11]*512];
    [new_process_table + 4] = RUNNING;
    [new_process_table + 9] = 0;
    ireturn;
endif;

[new_process_table + 4] = RUNNING;

multipop(BP);

return;