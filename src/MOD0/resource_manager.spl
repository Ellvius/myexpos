alias functionNum R1;
alias currentPID R2;


if(functionNum == ACQUIRE_DISK) then
    while ([DISK_STATUS_TABLE] == 1) do
        [PROCESS_TABLE + currentPID * 16 + 4] = WAIT_DISK;

        multipush(R1, R2, R3);
        call SCHEDULER;
        multipop(R1, R2, R3);

    endwhile;

    [DISK_STATUS_TABLE] = 1;
    [DISK_STATUS_TABLE + 4] = currentPID;
    return;
endif;


if(functionNum == ACQUIRE_SEMAPHORE) then
    alias i R3;
    i = 0;

    while(i < MAX_SEM_COUNT) do
        if([SEMAPHORE_TABLE + i * 4 + 1] == 0) then
            [SEMAPHORE_TABLE + i * 4 + 1] = 1;
            [SEMAPHORE_TABLE + i * 4] = -1;
            R0 = i;
            return;
        endif;
        i = i + 1;
    endwhile;

    R0 = -1;
    return;
endif;


if(functionNum == RELEASE_SEMAPHORE) then
    alias SEMTABLEINDEX R3;
    alias i R4;
    
    if([SEMAPHORE_TABLE + SEMTABLEINDEX * 4] == currentPID) then
        [SEMAPHORE_TABLE + SEMTABLEINDEX * 4] = -1;
        i = 0;

        while(i < 16) do 
            if([PROCESS_TABLE + i * 16 + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + i * 16 + 5] == SEMTABLEINDEX) then
                [PROCESS_TABLE + i * 16 + 4] = READY;
            endif;
            i = i + 1;
        endwhile;

    endif;

    [SEMAPHORE_TABLE + SEMTABLEINDEX * 4 + 1] = [SEMAPHORE_TABLE + SEMTABLEINDEX * 4 + 1] - 1;
    return;
endif;


if(functionNum == ACQUIRE_TERMINAL) then   
    while ([TERMINAL_STATUS_TABLE] == 1) do
        [PROCESS_TABLE + (currentPID)*16 + 4] = WAIT_TERMINAL;

        multipush(R1, R2, R3);
        call SCHEDULER;
        multipop(R1, R2, R3);

    endwhile;
    
    [TERMINAL_STATUS_TABLE] = 1;
    [TERMINAL_STATUS_TABLE + 1] = currentPID;
    return;
endif;


if(functionNum == RELEASE_TERMINAL) then    
    if(currentPID == [TERMINAL_STATUS_TABLE + 1]) then
        [TERMINAL_STATUS_TABLE] = 0;
        alias pid R5;
        pid = 0;

        while( pid < 16) do
            if ([PROCESS_TABLE + pid*16 + 4] == WAIT_TERMINAL) then
                [PROCESS_TABLE + pid*16 + 4] = READY;
            endif;
            pid = pid + 1;
        endwhile;
        
        R0 = 0;
        return;
    else
        R0 = -1;
        return;
    endif;
endif;