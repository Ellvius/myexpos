alias userSP R0;
userSP = SP;

// Set Mode flag to -1 for exception handler
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]  * 16 + 9] = -1;

// Change stack to kernel stack
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

// Save register context of the current process
backup;

// Push EIP onto the stack
multipush(EIP);



// If exception is not page fault or user stack is full
if((EC != 0) || (userSP == (PTLR * 512 - 1)))
then
    if(EC == 1)
    then
        print "IllInstr";
    endif;

    if(EC == 2)
    then
        print "IllMemAcc";
    endif;

    if(EC == 3)
    then
        print "ArithExcp";
    endif;

    // Call exit process function from process manager
    multipush(R0);
    R1 = 3;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_1;
    multipop(R0);

    // Invoke the context switch module
    multipush(R0);
    call SCHEDULER;
    multipop(R0);

endif;



// If Page number corresponds to a code page
if((EPN < 8) && (EPN >= 4))
then
    alias codeBlockNum R1;
    alias codePageNum R2;
    codeBlockNum = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + EPN];
    
    multipush(R0, R1);
    R1 = 5;
    R2 = codeBlockNum;
    call MOD_2;             // Get Code Page
    codePageNum = R0;
    multipop(R0, R1);

    [PTBR + EPN * 2] = codePageNum;
    [PTBR + EPN * 2 + 1] = "0100";
endif;



// If Page number corresponds to a Heap page
if((EPN == 2) || (EPN == 3))
then
    alias heapPage1 R3;
    alias heapPage2 R4;

    // Invoke Get Free Page to allocate 2 free pages for heap
    multipush(R0, R1, R2);
    R1 = 1;
    call MOD_2;         
    heapPage1 = R0;
    multipop(R0, R1, R2);

    multipush(R0, R1, R2, R3);
    R1 = 1;
    call MOD_2;         
    heapPage2 = R0;
    multipop(R0, R1, R2, R3);

    // Set the page table entry for heap 
    [PTBR+4] = heapPage1;
    [PTBR+5] = "0110";
    [PTBR+6] = heapPage2;
    [PTBR+7] = "0110";
endif;



// Pop EIP and restore register context
multipop(EIP);
restore;

// Reset Mode flag back to 0
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

// Switch to user stack
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];

// Increment SP and store EIP 
SP = SP + 1;
[SP] = EIP;

ireturn;