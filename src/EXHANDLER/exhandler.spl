//breakpoint;
alias userSP R5;
userSP = SP;

// Set Mode flag to -1 for exception handler
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]  * 16 + 9] = -1;

// Change stack to kernel stack
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

// Save register context of the current process
backup;

// Push EIP onto the stack
multipush(EIP);


// If exception is not page fault or user stack is full
if((EC != 0) || (userSP == (PTLR * 512 - 1)))
then
    if(EC == 1)
    then
        print "ExInstr";
    endif;

    if(EC == 2)
    then
        print "ExMemAcc";
    endif;

    if(EC == 3)
    then
        print "ExArith";
    endif;


    R1 = EXIT_PROCESS;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call PROCESS_MANAGER;

    call CONTEXT_SWITCH;

endif;



// If Page number corresponds to a code page
if((EPN < 8) && (EPN >= 4))
then
    alias codePageNum R1;
    alias codeBlockNum R2;
    codeBlockNum = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + EPN];
    
    R1 = GET_CODE_PAGE;
    R2 = codeBlockNum;
    call MEMORY_MANAGER;             
    codePageNum = R0;

    [PTBR + EPN * 2] = codePageNum;
    [PTBR + EPN * 2 + 1] = "1100";
endif;



// If Page number corresponds to a Heap page
if((EPN == 2) || (EPN == 3))
then
    R1 = GET_FREE_PAGE;
    call MEMORY_MANAGER;         
    [PTBR+4] = R0;
    [PTBR+5] = "1110";
    
    R1 = GET_FREE_PAGE;
    call MEMORY_MANAGER;         
    [PTBR+6] = R0;
    [PTBR+7] = "1110";
endif;



// Pop EIP and restore register context
multipop(EIP);
restore;

// Reset Mode flag back to 0
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

// Switch to user stack
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];

// Increment SP and store EIP 
SP = SP + 1;
[[PTBR + SP*2/512]*512 + SP % 512] = EIP;

ireturn;