// Load exception handler
loadi(2,15);
loadi(3,16);

// Load timer interrupt handler
loadi(4,17);
loadi(5,18);

// Load INT 10 module
loadi(22,35);
loadi(23,36);

// Load library from disk to memory
loadi(63,13);
loadi(64,14);

// Load the init code
loadi(65,7);
loadi(66,8);

// Set up page table pointers
PTBR = PAGE_TABLE_BASE;
PTLR = 10;

// Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

// Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

// Set up the application stack
SP = 8*512;
[76*512] = [65*512 + 1];

// Set up the User area page
[PROCESS_TABLE + 11] = 80;

// Set the PID for the first PROCESS_TABLE
[PROCESS_TABLE + 1] = 0;

// Set the current PID in the system status table
[SYSTEM_STATUS_TABLE + 1] = 0;

ireturn;